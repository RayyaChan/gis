<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!-- 指定数据连接驱动jar地址 -->
    <classPathEntry location="D:\Server\mysql-connector-java-5.1.40.jar"/>

    <!-- 一个数据库一个context -->
    <!--
    defaultModelType ：定义了MBG如何生成**实体类**
        1.conditional（默认值）: 如果类只包含一个字段,将不会生成一个单独的类
        2.flat : 一张表只生成一个实体类 （推荐使用）
        3.hierarchical : 如果表有主键,该模型会产生一个单独的主键实体类,如果表还有BLOB字段，
                        则会为表生成一个包含所有BLOB字段的单独的实体类,然后为所有其他的字段生成一个单独的实体类
    targetRuntime ：用于指定生成的代码的运行时环境
        1.MyBatis3 （默认值）: 生成对象中的"by example"方法,支持泛型和注解
        2.MyBatis3Simple : 不会有"by example"一类的方法，只有少量的动态SQL
    -->
    <context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8" />
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
        -->
        <property name="autoDelimitKeywords" value="false"/>
        <!--开启抑制类型的警告信息-->
        <property name="suppressTypeWarnings" value="true"/>

        <!-- 指明数据库的用于标记数据库对象名的符号 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 插件 ：其他插件参考http://www.jianshu.com/p/1b826d43dbaf-->
        <!--插件 ：用来为生成的Java模型类添加序列化接口-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--插件 ：生成的Java模型创建一个toString方法-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--插件 ：重命名生成的XXXExample类-->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$"/>
            <property name="replaceString" value="Criteria"/>
        </plugin>
        <!--自定义插件 ：生成业务层-->
        <plugin type="org.mybatis.generator.plugins.MybatisServicePlugin">
            <property name="targetPackage" value="com.gis.service"/>
            <property name="implementationPackage" value="com.gis.service.impl"/>
            <property name="targetProject" value="src/main/java"/>
            <property name="enableInsert" value="true"/>
            <property name="enableUpdateByExampleSelective" value="true"/>
            <property name="enableInsertSelective" value="true"/>
            <property name="enableUpdateByPrimaryKey" value="true"/>
            <property name="enableDeleteByPrimaryKey" value="true"/>
            <property name="enableDeleteByExample" value="true"/>
            <property name="enableUpdateByPrimaryKeySelective" value="true"/>
            <property name="enableUpdateByExample" value="true"/>
        </plugin>

        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 是否给实体类生成的备注的注释 true：是 ： 默认为false:否 -->
            <property name="addRemarkComments" value="true"/>
            <!-- 是否去掉注释代时间戳 true：是 ： false:否,默认yyyy-MM-dd HH:mm:ss（1.3.5修改版）-->
            <property name="suppressDate" value="false"/>
            <property name="dateFormat" value="yyyy/MM/dd HH:mm"/>
        </commentGenerator>

        <!-- 配置接数据库 -->
        <jdbcConnection
                connectionURL="jdbc:mysql://localhost:3306/gis?characterEncoding=UTF-8"
                driverClass="com.mysql.jdbc.Driver"
                password="123"
                userId="root" />

        <!--
        默认情况下的转换规则为：
        如果精度>0或者长度>18，就会使用java.math.BigDecimal
        如果精度=0并且10<=长度<=18，就会使用java.lang.Long
        如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
        如果精度=0并且长度<5，就会使用java.lang.Short
        如果设置为true，那么一定会使用java.math.BigDecimal
        -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- targetPackage:生成实体类存放的包名 -->
        <!-- targetProject:指定目标项目路径 -->
        <!-- 生成实体类的位置 -->
        <javaModelGenerator targetPackage="com.gis.model" targetProject="src/main/java">
            <!-- 自动为每一个生成的类创建一个构造方法 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否在当前路径下新加一层schema,eg：fase路径 model， true:model.[schemaName] -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!-- 生成mapper xml文件 -->
        <sqlMapGenerator targetPackage="com.gis.mapper" targetProject="src/main/java" >
            <!-- 是否在当前路径下新加一层schema,eg：fase路径dao， true:dao.[schemaName] -->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 生成mapper xml文件 -->
        <!--
            type ：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1.ANNOTATEDMAPPER:基于注解的Mapper接口，不会有对应的XML映射文件
                2.MIXEDMAPPER:XML和注解的混合形式
                3.XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.gis.mapper" targetProject="src/main/java" type="XMLMAPPER" >
            <!-- 是否在当前路径下新加一层schema,eg：fase路径dao， true:dao.[schemaName] -->
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 指定生成的数据库表 -->
        <table tableName="%">
            <!-- 指定自动生成主键的属性-->
            <!--<generatedKey column="attendance_id" sqlStatement="Mysql"/>-->
        </table>

        <!--可选：
        1，schema：数据库的schema；
        2，catalog：数据库的catalog；
        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
        5，enableInsert（默认true）：指定是否生成insert语句；
        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
        13，modelType：参考context元素的defaultModelType，相当于覆盖；
        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性-->

    </context>
</generatorConfiguration>